como aplicar está api a uma página criada com react e vite
possuo uma página de cadastro em src\pages\signup.jsx
dê o nome dos arquivos que devo modificar e o codigo completo modificado


src\App.jsx
import { BrowserRouter, Route, Routes } from "react-router-dom";
import { useState } from 'react';
import './App.css';
import Header from "./components/header";
import Footer from "./components/footer";
import Home from "./pages/home";
import MyOrders from "./pages/myorders";
import SignIn from "./pages/signin";
import SignUp from "./pages/signup";
import CartProvider from "./components/cartProvider";

function App() {
  const [count, setCount] = useState(0);

  

  return (
    <BrowserRouter>
      <>
      <CartProvider>
        <Header />
        <Routes>
          <Route path="/" element={<Home/>}/>
          <Route path="/myorders" element={<MyOrders/>}/>
          <Route path="/signin" element={<SignIn/>}/>
          <Route path="/signup" element={<SignUp/>}/>
        </Routes>
        <Footer />
      </CartProvider>
      </>
    </BrowserRouter>
  );
}

export default App;



src\pages\signup.jsx
"use client";
import React from 'react';

import 'tailwindcss/tailwind.css';

const SignUp = () => {
  return (
      <main className="bg-[#1E3A8A] min-h-screen">
          <a href="/">
          <img className="w-[120px] mx-auto block pt-6 pb-6" src="images/logo.png" alt="Logo"></img>
          </a>
          <form className="flex flex-col justify-center items-center bg-white mr-6 ml-6" onSubmit={(e) => handleSubmit(e)}>
           
            <h1 className="text-black text-2xl font-semibold pt-2 ">Cadastre-se</h1>

            <div className="">
              <label className="text-black flex flex-col justify-center items-center pb-4 pt-4">
                <h1 className="w-full font-bold">Nome*</h1>
                <input placeholder="Digite seu nome" required className="bg-slate-100 p-3 rounded-md outline-none" />
              </label>
              <label className="text-black flex flex-col w-full justify-center items-center pb-4 pt-4">
                <h1 className="w-full font-bold">Email*</h1>
                <input placeholder="Digite seu e-mail" required type="email" className="bg-slate-100 p-3 rounded-md outline-none" />
              </label>
              <label className="text-black flex flex-col w-full justify-center items-center  pb-4 pt-4">
                <h1 className="w-full font-bold">Senha*</h1>
                <input placeholder="Digite sua senha" required type="password" className="bg-slate-100 p-3 rounded-md outline-none" />
              </label>
            </div>

            <button className="flex items-center justify-center bg-orange-500 w-[260px] h-[60px] rounded-lg font-bold text-white">
              Cadastrar
            </button>
            <a href="/signin" className="pb-6 pt-8">
              Já possui cadastro?
              <span className="text-orange-500">Clique Aqui</span>
            </a>
          </form>
      </main>
  );
};

export default SignUp;




src\app.js
const express = require('express')
const { personsRouter } = require('./routes')

const app = express()

app.use(express.json())

app.use('/persons', personsRouter)

app.listen(3000, () => console.log('O servidor está pronto para aceitar conexões.!'))


src\controllers\persons.js
const personsService = require('../services/persons')

const list = async (req, res) => {
    const { 
        errorMessage, 
        statusCode, 
        value 
    } = await personsService.list()

    const persons = value ? value : { message: errorMessage }

    return res.status(statusCode).json(persons)
}

const create = async (req, res) => {
    const { 
        errorMessage, 
        statusCode, 
        value 
    } = await personsService.create(req.body)

    const person = value ? value : { message: errorMessage }

    return res.status(statusCode).json(person)
}

module.exports = {
    list,
    create
}


src\databases\pgConnection.js
const { Pool } = require('pg')

const connection = new Pool({
    host: 'localhost',
    user: 'postgres',
    port: 5432,
    password: 'admin',
    database: 'teste'
})

module.exports = connection

src\models\index.js
const personsModel = require('./persons')
const phonesModel = require('./phones')

module.exports = {
    personsModel,
    phonesModel
}

src\models\phones.js
const pgConnection = require('../databases/pgConnection')

const findPhones = async (phones) => {
    const phonesInDB = await pgConnection.query('select * from telefones where telefone in ($1);', [...phones])

    return phonesInDB.rows
}

module.exports = {
    findPhones
}

src\routes\index.js
const personsRouter = require('./persons')

module.exports = {
    personsRouter
}


src\routes\persons.js
const express = require('express')
const personsController = require('../controllers/persons')

const router = express.Router()

router.get('/', personsController.list)
router.post('/', personsController.create)

module.exports = router


src\services\persons.js
const express = require('express')
const personsController = require('../controllers/persons')

const router = express.Router()

router.get('/', personsController.list)
router.post('/', personsController.create)

module.exports = router

src\services\personValidations\persons.js
const validateFields = (person) => {
    if (!person.name || typeof person.name !== 'string') {
        return 'Name invalid!'
    }

    if (!person.age || typeof person.age !== 'number') {
        return 'Age invalid!'
    }

    if (!Array.isArray(person.phones)) {
        return 'Phones invalid!'
    }

    if (person.phones.some(p => typeof p !== 'number')) {
        return 'Some phone is invalid!'
    }

    return ''
}

module.exports = {
    validateFields
}